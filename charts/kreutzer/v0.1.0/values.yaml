# Default values for kreutzer.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

global:
  kubeVersion: ""
  imageRegistry: ""
  imagePullSecrets: []
  storageClass: ""

kubeVersion: ""

clusterDomain: cluster.local

logLevel: debug

exposureType: Ingress

service:
  core:
    ports:
      http: 80
      https: 443
  portal:
    ports:
      http: 80
      https: 443
  database:
    ports:
      tcp:
        database: 5432
  dind:
    ports:
      http: 2376
      https: 2376
  vault:
    ports:
      http: 8200

ingress:
  core:
    hostname: core.domain.com
    path: /api/(.*)
    annotations:
      nginx.ingress.kubernetes.io/rewrite-target: /$1
      nginx.ingress.kubernetes.io/use-regex: "true"
  portal:
    hostname: core.domain.com
    annotations: {}
    tls: false


persistence:
  enabled: true
  resourcePolicy: 'keep'
  persistentVolumeClaim: {}
  accessModes:
    - ReadOnlyMany

volumePermissions:
  enabled: true

components:
  portal:
    enabled: true
    image:
      repository: nginx:latest
    ports:
      http: 80
    configMaps:
      portal-config:
        type: File
        projectPath: conf/nginx.conf
        mountPath: /etc/nginx/nginx.conf
  core:
    enabled: true
    image:
      repository: busybox:1.30.1
    ports:
      http: 8080
  database:
    enabled: true
    type: StatefulSet
    image:
      repository: postgres
      tag: 15.1-alpine
    ports:
      tcp:
        server: 5432

    env:
      - name: PGDATA
        value: /var/lib/postgresql/data/pgdata
    secrets:
      kreutzer-database:
        POSTGRES_PASSWORD: admin
    resources: {}
    podSecurityContext:
      fsGroup: 70
      runAsUser: 70
      runAsGroup: 70
    volumes:
      - emptyDir:
          medium: Memory
          sizeLimit: 512Mi
        name: shm-volume
      - name: database-data
        hostPath:
          path: /data/kreutzer/database
          type: DirectoryOrCreate
    volumeMounts:
      - mountPath: /var/lib/postgresql/data
        name: database-data
      - mountPath: /dev/shm
        name: shm-volume
    initContainers:
      - name: data-migrator
        image:
          repository: postgres:15.1-alpine
        command:
          - /bin/sh
          - -c
        args:
          - '[ -e /var/lib/postgresql/data/postgresql.conf ] && [ ! -d /var/lib/postgresql/data/pgdata
            ] && mkdir -m 0700 /var/lib/postgresql/data/pgdata && mv /var/lib/postgresql/data/*
            /var/lib/postgresql/data/pgdata/ || true'
        resources: {}
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: database-data
      - name: data-permissions-ensurer
        image:
          repository: postgres
          tag: 15.1-alpine
        command:
          - /bin/sh
          - -c
        args:
          - chmod -R 700 /var/lib/postgresql/data/pgdata || true
        resources: {}
        volumeMounts:
          - mountPath: /var/lib/postgresql/data
            name: database-data
  vault:
    enabled: true
    type: StatefulSet
    image:
      repository: hashicorp/vault:1.12.2
    command:
      - "/bin/sh"
      - "-ec"
    args:
      - |
        cp /vault/config/extraconfig-from-values.hcl /tmp/storageconfig.hcl;
        [ -n "${HOST_IP}" ] && sed -Ei "s|HOST_IP|${HOST_IP?}|g" /tmp/storageconfig.hcl;
        [ -n "${POD_IP}" ] && sed -Ei "s|POD_IP|${POD_IP?}|g" /tmp/storageconfig.hcl;
        [ -n "${HOSTNAME}" ] && sed -Ei "s|HOSTNAME|${HOSTNAME?}|g" /tmp/storageconfig.hcl;
        [ -n "${API_ADDR}" ] && sed -Ei "s|API_ADDR|${API_ADDR?}|g" /tmp/storageconfig.hcl;
        [ -n "${TRANSIT_ADDR}" ] && sed -Ei "s|TRANSIT_ADDR|${TRANSIT_ADDR?}|g" /tmp/storageconfig.hcl;
        [ -n "${RAFT_ADDR}" ] && sed -Ei "s|RAFT_ADDR|${RAFT_ADDR?}|g" /tmp/storageconfig.hcl;
        /usr/local/bin/docker-entrypoint.sh vault server -config=/tmp/storageconfig.hcl
    ports:
      http: 8200
      https: 8201
      tcp:
        http-rep: 8202
    env:
      - name: HOSTNAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: HOST_IP
        valueFrom:
          fieldRef:
            fieldPath: status.hostIP
      - name: POD_IP
        valueFrom:
          fieldRef:
            fieldPath: status.podIP
      - name: VAULT_K8S_POD_NAME
        valueFrom:
          fieldRef:
            fieldPath: metadata.name
      - name: VAULT_K8S_NAMESPACE
        valueFrom:
          fieldRef:
            fieldPath: metadata.namespace
      - name: VAULT_ADDR
        value: "http://127.0.0.1:8200"
      - name: VAULT_API_ADDR
        value: "http://$(POD_IP):8200"
      - name: VAULT_CLUSTER_ADDR
        value: "https://$(HOSTNAME).kreutzer-vault:8201"
      - name: SKIP_CHOWN
        value: "true"
      - name: SKIP_SETCAP
        value: "true"
      - name: HOME
        value: "/home/vault"
    configMaps:
      vault-config:
        type: File
        projectPath: conf/extraconfig-from-values.hcl
        mountPath: /vault/config/extraconfig-from-values.hcl
    lifecycle:
      preStop:
        exec:
          command:
            - "/bin/sh"
            - "-c"
            - "sleep 5 && kill -SIGTERM $(pidof vault)"
    securityContext:
      allowPrivilegeEscalation: false
    podSecurityContext:
      runAsNonRoot: true
      runAsGroup: 1000
      runAsUser: 100
      fsGroup: 1000
    volumeMounts:
      - name: data
        mountPath: /vault/data
      - name: home-dir
        mountPath: /home/vault
    volumes:
      - name: home-dir
        emptyDir: {}
      - name: data
        hostPath:
          path: /data/kreutzer/vault


  dind:
    enabled: true
    type: StatefulSet
    image:
      repository: docker:dind
    ports:
      http: 2376
    securityContext:
      privileged: true